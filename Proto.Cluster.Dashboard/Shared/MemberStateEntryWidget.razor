@using Proto.Cluster.Gossip
<MatExpansionPanel @bind-Expanded="@expanded">
    <MatExpansionPanelSummary>
        <MatExpansionPanelHeader>
            @($"State Key: {Key}")
        </MatExpansionPanelHeader>
        <MatExpansionPanelSubHeader>
             @($"Version: {State.SequenceNumber} - Updated: {State.LocalTimestamp}")
        </MatExpansionPanelSubHeader>
    </MatExpansionPanelSummary>
   <MatExpansionPanelDetails>

    @if (Key == "topology")
    {
        var topology = State.Value.Unpack<ClusterTopology>();
        <ClusterTopologyWidget State="topology"></ClusterTopologyWidget>
    }
    else if (Key == "heartbeat")
    {
        var heartbeat = State.Value.Unpack<MemberHeartbeat>();
        <MemberHeartbeatWidget State="heartbeat"></MemberHeartbeatWidget>
    }
    else if (Key == "reb:ready")
    {
        var m = State.Value.Unpack<ReadyForRebalance>();
        <ReadyForRebalanceWidget State="m"></ReadyForRebalanceWidget>
    }
    else if (Key == "reb:done")
    {
        var m = State.Value.Unpack<RebalanceCompleted>();
        <RebalanceCompletedWidget State="m"></RebalanceCompletedWidget>
    }
    else
    {
        var any = State.Value;
        <AnyStateWidget State="any"></AnyStateWidget>
    }
   </MatExpansionPanelDetails>

</MatExpansionPanel>

@code {
    private bool expanded;
    
    [Parameter]
    public string Key { get; set; }
    
    [Parameter]
    public GossipKeyValue State { get; set; }
}