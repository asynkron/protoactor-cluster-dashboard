@page "/clusteroverview"
@using Proto.Cluster.Gossip
@inject ActorSystem System
<PageTitle>Counter</PageTitle>

<MudToggleIconButton @bind-Toggled="@_groupByKind"
                     Icon="@Icons.Material.Filled.AlarmOff" Color="@Color.Info" Title="Group by member"
                     ToggledIcon="@Icons.Material.Filled.AlarmOn" ToggledColor="@Color.Warning" ToggledTitle="Group by kind"/>
@if (_groupByKind)
{
    <span>Group by kind</span>
}
else
{
    <span>Group by member</span>
}

<MudChart ChartType="ChartType.Bar" LegendPosition="Position.Bottom" ChartSeries="@Series" XAxisLabels="@XAxisLabels.ToArray()" Width="100%" Height="350px">
	<CustomGraphics>

	</CustomGraphics>
</MudChart>


@code {
    private List<ChartSeries> Series = new();
    private List<string> XAxisLabels = new();
    
    private readonly CancellationTokenSource _cts = new();
    private bool _disposed;
    private bool _groupByKind;
    
    protected override async Task OnInitializedAsync()
    {
        _ = Task.Run(RunLoop, _cts.Token);
        await base.OnInitializedAsync();
    }
    
    private async Task RunLoop()
    {
        while (!_cts.Token.IsCancellationRequested)
        {
            var memberHeartbeats = await System.Cluster().Gossip.GetState<MemberHeartbeat>(GossipKeys.Heartbeat);
            var stats = (from x in memberHeartbeats
                let memberId = x.Key
                from y in x.Value.ActorStatistics.ActorCount
                select (MemberId: memberId, Kind: y.Key, Count: y.Value))
                .ToList();
                    
            var statsByKind = stats.ToLookup(t => t.Kind, t => t);
            var statsByMember = stats.ToLookup(t => t.MemberId, t => t);
                
            Series.Clear();
            XAxisLabels.Clear();


            var labelsData = statsByKind;
            var seriesData = statsByMember;
            if (_groupByKind)
            {
                labelsData = statsByMember;
                seriesData = statsByKind;
            }

            foreach (var label in labelsData)
            {
                XAxisLabels.Add(Trim(label.Key));
            }

            foreach (var series in seriesData)
            {
                Series.Add(new ChartSeries()
                {
                    Name = Trim(series.Key),
                    Data = series.Select(l => (double)l.Count).ToArray(),
                });
            }
                
            await InvokeAsync(StateHasChanged);
            await Task.Delay(100);
        }
    }

    private string Trim(string text)
    {
        var max = 10;
        if (text.Length < max)
        {
            return text;
        }
        return text.Substring(0, max) + "...";
    }

    public void Dispose()
    {
        Dispose(true);
    }

    public void Dispose(bool disposing)
    {
        if (_disposed)
        {
            return;
        }
        if (disposing)
        {
            _cts.Cancel();
        }
        _disposed = true;
    }
}