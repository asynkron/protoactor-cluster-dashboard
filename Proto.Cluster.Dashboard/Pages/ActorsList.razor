@page "/actorlist"
@using Proto.Remote
@using Grpc.Core
@using Proto.Cluster.Gossip
@inject ActorSystem System
<h3>ActorsList</h3>
<MudGrid Spacing="6">
    <MudItem xs="5">
        <MudTextField Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Filled.Search"
                      Label="Search"
                      Variant="Variant.Filled"
                      @bind-Value="_search"
                      DebounceInterval="100"
                      OnDebounceIntervalElapsed="UpdateSearch">
        </MudTextField>


        @if (_members != null)
        {
            <div class="mt-2 mb-4">Showing @(SearchMembers().Count()) of @(_members.Count()) members</div>
            foreach (var member in SearchMembers())
            {
                <div @onclick="() => _member = member">
                    <MudCard Class="my-2" Style="@(member.Id == _member?.Id ? "border: 2px solid " + Theme.Palette.PrimaryLighten : "")" Outlined="true">
                        <MudCardHeader>
                            <CardHeaderAvatar>
                                <MudAvatar Color="Color.Success">
                                    <MudIcon Icon="@Icons.Material.Filled.Favorite"/>
                                </MudAvatar>
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                <MudText Typo="Typo.body1">@member.Id</MudText>
                                <MudText Typo="Typo.body2">Address: @member.Address</MudText>
                                <MudText Typo="Typo.body2">Kinds: @string.Join(", ", member.Kinds)</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default"/>
                            </CardHeaderActions>
                        </MudCardHeader>
                    </MudCard>
                </div>
            }
        }

    </MudItem>
    <MudItem xs="7">
    </MudItem>
</MudGrid>

@code {

    protected override async Task OnInitializedAsync()
    {
        _ = Task.Run(RunLoop, _cts.Token);
        await base.OnInitializedAsync();
    }

    private async Task RunLoop()
    {
        var channel = new Channel("", ChannelCredentials.Insecure);
        var client = new Remoting.RemotingClient(channel);
        var res = await client.ListProcessesAsync(new ListProcessesRequest() { Name = "" });
        while (!_cts.Token.IsCancellationRequested)
        {
            _state = await System.Cluster().Gossip.GetStateSnapshot();
            _members = System.Cluster().MemberList.GetAllMembers();
            _member ??= _members.First();
            await InvokeAsync(StateHasChanged);
            await Task.Delay(100);
        }
    }

    private GossipState _state;
    private Member[] _members;
    private Member _member;
    private readonly CancellationTokenSource _cts = new();
    private bool _disposed;
    private readonly MudTheme Theme = new();
    private string _search = "";

    public void Dispose()
    {
        Dispose(true);
    }

    public void Dispose(bool disposing)
    {
        if (_disposed)
        {
            return;
        }
        if (disposing)
        {
            _cts.Cancel();
        }
        _disposed = true;
    }

    private IEnumerable<Member> SearchMembers() => _members.Where(m => m.Id.Contains(_search) || m.Address.Contains(_search));

    private async Task UpdateSearch()
    {
        await InvokeAsync(StateHasChanged);
    }

}