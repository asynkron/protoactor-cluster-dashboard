@page "/counter"
@using Proto.Cluster.Gossip
@inject ActorSystem System
<PageTitle>Counter</PageTitle>
<style>
    .box {        
        border:1px solid #00000030;        
        padding: 4px;
        margin: 4px;
        border-radius: 3px;
        background-color: #ffffff60;
        font-size: small;
    }
   
</style>



<h2>Gossip State</h2>
@if (_state != null)
{
    var i = 0;
    foreach (var x in _state.Members)
    {
        <div class="box" style="background-color:@GetColor(i)">
            <MemberStateWidget MemberId="@x.Key" State="@x.Value"></MemberStateWidget>

        </div>
        i++;
    }
}

@code {
    private GossipState? _state;
    private readonly CancellationTokenSource _cts = new();
    private bool _disposed;
    private Member[] _members;

    protected override async Task OnInitializedAsync()
    {
        _ = Task.Run(async () =>
        {
            while (!_cts.Token.IsCancellationRequested)
            {
                _state = await System.Cluster().Gossip.GetStateSnapshot();
                _members = System.Cluster().MemberList.GetAllMembers();
                await InvokeAsync(StateHasChanged);
                await Task.Delay(100);
            }
        }, _cts.Token);
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        Dispose(true);
    }

    public void Dispose(bool disposing)
    {
        if (_disposed)
        {
            return;
        }
        if (disposing)
        {
            _cts.Cancel();
        }
        _disposed = true;
    }

    private readonly string[] colors = { "#D5E8D4", "#E1D5E7", "#FFF2CC", "#DAE8FC" };

    private object GetColor(int i)
    {
        return colors[i % colors.Length];
    }
}